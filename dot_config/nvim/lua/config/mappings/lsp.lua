return {
  dart = {
    { "<Localleader>f", group = " Flutter Tools" },
    {
      "<Localleader>fc",
      function() require("telescope").extensions.flutter.commands() end,
      desc = " Flutter Commands",
    },
  },
  go = {
    { "<Localleader>g", group = " Go Tools" },
    { "<Localleader>gf", "<cmd>GoIfErr<cr>", desc = " Generate if err" },
    { "<Localleader>gi", "<cmd>GoImpl<cr>", desc = " Implement interace" },

    { "<Localleader>gt", group = "󰗇 Tests" },
    { "<Localleader>gta", "<cmd>GoTestAdd<cr>", desc = " Generate test" },
    { "<Localleader>gte", "<cmd>GoTestsExp<cr>", desc = " Generate test for exported" },
    { "<Localleader>gtA", "<cmd>GoTestsAll<cr>", desc = " Generate test for all" },
  },
  rust = {
    { "<Localleader>r", group = "󱘗 Rust Tools" },
    { "<Localleader>rD", function() vim.cmd.RustLsp "renderDiagnostic" end, desc = " Render diagnostics" },
    { "<Localleader>rc", function() vim.cmd.RustLsp "openCargo" end, desc = " Open Cargo.toml" },
    { "<Localleader>rd", function() vim.cmd.RustLsp { "debuggables", "last" } end, desc = " Debuggables" },
    { "<Localleader>rf", function() vim.cmd.RustLsp { "flyCheck" } end, desc = " Run flycheck" },
    { "<Localleader>rg", function() vim.cmd.RustLsp "crateGraph" end, desc = " View Crate Graph" },
    { "<Localleader>rj", function() vim.cmd.RustLsp "joinLines" end, desc = " Join Lines" },
    { "<Localleader>rk", function() vim.cmd.RustLsp "openDocs" end, desc = " Open docs.rs" },
    { "<Localleader>rl", function() vim.cmd.RustLsp "explainError" end, desc = " Explain Error" },
    { "<Localleader>rm", function() vim.cmd.RustLsp "rebuildProcMacros" end, desc = " Rebuild proc macros" },
    { "<Localleader>rp", function() vim.cmd.RustLsp "parentModule" end, desc = " Go to parent module" },
    { "<Localleader>rr", function() vim.cmd.RustLsp { "runnables", "last" } end, desc = " Runnables" },
    {
      "<Localleader>rs",
      function() vim.cmd.RustLsp { "workspaceSymbol", "allSymbols" } end,
      desc = " Search workspace symbols",
    },
    { "<Localleader>rt", function() vim.cmd.RustLsp "syntaxTree" end, desc = " View syntax tree" },
    { "<Localleader>rx", function() vim.cmd.RustLsp "expandMacro" end, desc = " Expand Macros Recursively" },
  },
  typst = {
    { "<Localleader>t", group = "󰈦 Typst tools" },
    { "<Localleader>tw", "<cmd>TypstWatch<cr>", desc = " Watch and compile your document" },
    { "<Localleader>tc", "<cmd>Tocv<cr>", desc = " Table of contents" },
  },
  typescript = {
    { "<Localleader>t", group = " Typescript tools" },
    { "<Localleader>ta", function() vim.cmd.VtsExec "fix_all" end, desc = " Fix all" },
    { "<Localleader>tc", function() vim.cmd.VtsExec "goto_project_config" end, desc = " Open tsconfig.json" },
    { "<Localleader>td", function() vim.cmd.VtsExec "goto_source_definition" end, desc = " Source definition" },
    { "<Localleader>tf", function() vim.cmd.VtsExec "file_references" end, desc = " File references" },
    { "<Localleader>ti", function() vim.cmd.VtsExec "add_missing_imports" end, desc = " Add missing imports" },
    { "<Localleader>tn", function() vim.cmd.VtsExec "rename_file" end, desc = " Rename file" },
    { "<Localleader>to", function() vim.cmd.VtsExec "organize_imports" end, desc = " Organize imports" },
    { "<Localleader>tp", function() vim.cmd.VtsExec "reload_projects" end, desc = " Reload project" },
    { "<Localleader>tr", function() vim.cmd.VtsExec "restart_tsserver" end, desc = " Restart underlying tsserver" },
    { "<Localleader>ts", function() vim.cmd.VtsExec "sort_imports" end, desc = "Sort imports" },
    { "<Localleader>tu", function() vim.cmd.VtsExec "remove_unused_imports" end, desc = " Remove unused imports" },
    { "<Localleader>tv", function() vim.cmd.VtsExec "select_ts_version" end, desc = " Select ts version" },
    { "<Localleader>tx", function() vim.cmd.VtsExec "remove_unused" end, desc = " Remove unused" },
  },
}
