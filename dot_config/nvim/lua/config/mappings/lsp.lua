return {
  dart = {
    { "<Localleader>f", group = " Flutter Tools" },
    { "<Localleader>fc", function() require("telescope").extensions.flutter.commands() end, "Flutter Commands" },
    { "<Localleader>fs", function() require("telescope").extensions.flutter.fvm() end, "Flutter SDK (fvm)" },
  },
  -- TODO: Update this
  go = {
    { "<Localleader>g", group = " Go Tools" },
    { "<Localleader>gc", "<cmd>GoCmt<cr>", "Generate comment" },
    { "<Localleader>ge", "<cmd>GoGet<cr>", "Run go get" },
    { "<Localleader>gf", "<cmd>GoIfErr<cr>", "Generate if err" },
    { "<Localleader>gg", "<cmd>GoGenerate<cr>", "go generate" },
    { "<Localleader>gi", "<cmd>GoImpl<cr>", "Implement interace" },
    { "<Localleader>gm", "<cmd>GoMod <cr>", "Run go mod" },

    { "<Localleader>gt", group = "󰓹 Tags" },
    { "<Localleader>gta", "<cmd>GoTagAdd<cr>", "Add yaml/json tag" },
    { "<Localleader>gtr", "<cmd>GoTagRm<cr>", "Rm yaml/json tag" },

    { "<Localleader>gT", group = "󰗇 Tests" },
    { "<Localleader>gTa", "<cmd>GoTestAdd<cr>", "Generate test" },
    { "<Localleader>gTe", "<cmd>GoTestsExp<cr>", "Generate test for exported" },
    { "<Localleader>gTA", "<cmd>GoTestsAll<cr>", "Generate test for all" },
  },
  rust = {
    { "<Localleader>r", group = "󱘗 Rust Tools" },
    { "<Localleader>rD", function() vim.cmd.RustLsp "renderDiagnostic" end, " Render diagnostics" },
    { "<Localleader>rS", function() vim.cmd.RustLsp { "ssr" } end, " Structural Search" },
    { "<Localleader>rc", function() vim.cmd.RustLsp "openCargo" end, " Open Cargo.toml" },
    { "<Localleader>rd", function() vim.cmd.RustLsp { "debuggables", "last" } end, " Debuggables" },
    { "<Localleader>rf", function() vim.cmd.RustLsp { "flyCheck" } end, " Run flycheck" },
    { "<Localleader>rg", function() vim.cmd.RustLsp "crateGraph" end, " View Crate Graph" },
    { "<Localleader>rj", function() vim.cmd.RustLsp "joinLines" end, " Join Lines" },
    { "<Localleader>rk", function() vim.cmd.RustLsp "openDocs" end, " Open docs.rs" },
    { "<Localleader>rl", function() vim.cmd.RustLsp "explainError" end, " Explain Error" },
    { "<Localleader>rm", function() vim.cmd.RustLsp "rebuildProcMacros" end, " Rebuild proc macros" },
    { "<Localleader>rp", function() vim.cmd.RustLsp "parentModule" end, " Go to parent module" },
    { "<Localleader>rr", function() vim.cmd.RustLsp { "runnables", "last" } end, " Runnables" },
    {
      "<Localleader>rs",
      function() vim.cmd.RustLsp { "workspaceSymbol", "allSymbols" } end,
      " Search workspace symbols",
    },
    { "<Localleader>rt", function() vim.cmd.RustLsp "syntaxTree" end, " View syntax tree" },
    { "<Localleader>rx", function() vim.cmd.RustLsp "expandMacro" end, " Expand Macros Recursively" },
  },
  typst = {
    { "<Localleader>t", group = "󰈦 Typst tools" },
    { "<Localleader>tw", "<cmd>TypstWatch<cr>", "Watch and compile your document" },
    { "<Localleader>tc", "<cmd>Tocv<cr>", "Table of contents" },
  },
  typescript = {
    { "<Localleader>t", group = " Typescript tools" },
    { "<Localleader>ta", function() vim.cmd.VtsExec "fix_all" end, " Fix all" },
    { "<Localleader>tc", function() vim.cmd.VtsExec "goto_project_config" end, " Open tsconfig.json" },
    { "<Localleader>td", function() vim.cmd.VtsExec "goto_source_definition" end, " Source definition" },
    { "<Localleader>tf", function() vim.cmd.VtsExec "file_references" end, " File references" },
    { "<Localleader>ti", function() vim.cmd.VtsExec "add_missing_imports" end, " Add missing imports" },
    { "<Localleader>tn", function() vim.cmd.VtsExec "rename_file" end, " Rename file" },
    { "<Localleader>to", function() vim.cmd.VtsExec "organize_imports" end, " Organize imports" },
    { "<Localleader>tp", function() vim.cmd.VtsExec "reload_projects" end, " Reload project" },
    { "<Localleader>tr", function() vim.cmd.VtsExec "restart_tsserver" end, " Restart underlying tsserver" },
    { "<Localleader>ts", function() vim.cmd.VtsExec "sort_imports" end, "Sort imports" },
    { "<Localleader>tu", function() vim.cmd.VtsExec "remove_unused_imports" end, " Remove unused imports" },
    { "<Localleader>tv", function() vim.cmd.VtsExec "select_ts_version" end, " Select ts version" },
    { "<Localleader>tx", function() vim.cmd.VtsExec "remove_unused" end, " Remove unused" },
  },
}
